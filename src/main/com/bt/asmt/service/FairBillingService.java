package main.com.bt.asmt.service;

import static java.util.stream.Collectors.groupingBy;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import main.com.bt.asmt.constant.FairBillingConstants;
import main.com.bt.asmt.enums.Status;
import main.com.bt.asmt.exception.FairBillingException;
import main.com.bt.asmt.model.ReportData;
import main.com.bt.asmt.model.Session;
import main.com.bt.asmt.util.FairBillingUtility;

public class FairBillingService {

	private FairBillingUtility util;
	public FairBillingService(){
		this.util=new FairBillingUtility();
	}
	/*
	 * Returns list of session report data after printing it in console
	 * 
	 * @param fileName absolute path of a log file generated by the fair billing
	 * application
	 * 
	 * @return list of report data which gives a consolidated view of all sessions
	 * for a particular day
	 */
	public List<ReportData> printReport(String fileName) {
		// gets valid session data list from log file
		List<Session> sessionList = util.getSessionsFromLog(fileName);
		List<ReportData> reportDataList = new ArrayList<>();
		// checks if any valid session logged in the log file
		if (!sessionList.isEmpty()) {
			//sorting the session list by timestamp in ascending order
			sessionList.sort((o1, o2) -> o1.getTimeStamp().compareTo(o2.getTimeStamp()));
			Date startTime = sessionList.get(0).getTimeStamp();
			Date endTime = sessionList.get(sessionList.size() - 1).getTimeStamp();
			//getting the map of sessions with its user
			Map<String, List<Session>> sessionMap = sessionList.stream().collect(groupingBy(Session::getUserName));
			sessionMap.forEach((name, sessions) -> {
				ReportData rptData = getReportData(startTime, endTime, sessions);
				rptData.setUserName(name);
				reportDataList.add(rptData);
				System.out.println(String.format("%s %d %d", name, rptData.getSessionCount(), rptData.getDuration()));

			});
		}
		// throwing error if no valid session was present
		else {
			throw new FairBillingException("No session found in log");
		}
		return reportDataList;
	}

	/*
	 * This method calculated the total number of sessions and duration for a
	 * particular user
	 * 
	 * @param startTime represents the timestamp of the first valid session present
	 * in the log
	 * 
	 * @param endTime represents the timestamp of the last valid session present in
	 * the log
	 * 
	 * @param sessions represnt the list of all valid sessions against a user
	 * 
	 * @return reportData represents the data which includes total number of
	 * sessions and duration for a particular user
	 */
	private ReportData getReportData(Date startTime, Date endTime, List<Session> sessions) {
		long sessionDuration = 0;
		int totalNoOfSessions = 0;
		for (Session session : sessions) {
			// if it is a start session trying to find out its immediate end session
			// associated with it
			if (session.getStatus().toString().equalsIgnoreCase(Status.START.toString())) {
				Optional<Session> immediateEnd = sessions.stream()
						.filter(ts -> ts.getStatus().toString().equalsIgnoreCase(Status.END.toString())).findFirst();
				// if an end session is found , calculating duration of the session
				if (immediateEnd.isPresent()) {
					sessionDuration += immediateEnd.get().getTimeStamp().getTime() - session.getTimeStamp().getTime();
					immediateEnd.get().setStatus(Status.DONE);
				}
				// if ends up with no end session, considering the end time as the end of the
				// start session and calculating the duration
				else {
					sessionDuration += endTime.getTime() - session.getTimeStamp().getTime();
				}
				// incrementing the session count by one
				totalNoOfSessions++;

			}
			// if it is an end session without a start, considering the start time as the
			// start of the end session and calculating the duration
			else if (session.getStatus().toString().equalsIgnoreCase(Status.END.toString())) {
				sessionDuration += session.getTimeStamp().getTime() - startTime.getTime();
				session.setStatus(Status.DONE);
				// incrementing the session count by one
				totalNoOfSessions++;
			}
		}

		return new ReportData(totalNoOfSessions, sessionDuration / 1000);
	}

	
}
